def getLoginUser() {
    def loginUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')['userId'][0]
    return loginUser
}

def LOGIN_USER = getLoginUser()
def AGENT_LABLE = "robot_windows_" + LOGIN_USER
                    
pipeline {    
    options {skipDefaultCheckout(true)}
    
    //agent any
    agent { 
        label {
            label "${AGENT_LABLE}"
        }
    }
    
    stages {
        stage('Parameters'){
            steps {
                script { 
                    def choiceUtility = '''
	                    return [
	                    "",
	                    "Configure Device After Factory Reset",
	                    "Configure Device LAN IP Via ECO API",
	                    "Capture Packets On RG Gateway",
	                    "Capture Packets On AWS Servers",
	                    "Get Device Classifiers",
	                    "Compare Device Classifiers From Two Environments",
	                    "Generate Excel With Data From Files"
	                    ]
                    '''
                    
                    def information = """
	                    if (Utility == 'Configure Device After Factory Reset') {
	                        return '''<p>
	                        <b>Currently only support 5268AC, BGW, NVG devices in Santa Clara and Austin lab.</b>
	                        </p>
	                        <p style="color:blue">
	                        <b>Input device SerialNumber:</b> - Device with the serialnumber is in factory reset status<br>
	                        <b>Input acs url:</b> - This acs_url will be configured on the device<br>
	                        <p>'''
	                    } else if (Utility == 'Configure Device LAN IP Via ECO API') {
	                        return '''<p>
	                        <b>Currently only support 5268AC, BGW, NVG devices.</b>
	                        </p>
	                        <p style="color:blue">
	                        <b>Input device SerialNumber:</b> - Device with the serialnumber has already bootstrapped to environment<br>
	                        <b>Input device OUI:</b> - The device OUI<br>
	                        <b>Input environment info: </b>SOAP API URL and Auth<br>
	                            - API URL - base API URL<br>
	                            - Auth Method - The values can be http_auth, client_certs, wsse_user_token<br>
	                            - Auth List - A list of auth data corresponding to the auth method, e.g., ['nibws', '2wire'] for http_auth or ['webservice_att_labs.crt.pem', 'webservice_att_labs.key.pem'] for client_certs	                        
	                        <p>'''
	                    } else if (Utility == 'Capture Packets On RG Gateway') {
	                        return '''<p>
	                        <b>Capture packets on 10.77.126.2 (Santa Clara RG Gateway) or 74.118.172.228 (Autin RG Gateway) depending on where the device is located.</b>
	                        </p>
	                        <p style="color:blue">
	                        <b>Input device SerialNumber:</b> - Device with the serialnumber has already bootstrapped to environment<br>
	                        <b>Input device OUI:</b> - The device OUI<br>
	                        <b>Input environment info: </b>SOAP API URL and Auth<br>
	                            - API URL - base API URL<br>
	                            - Auth Method - The values can be http_auth, client_certs, wsse_user_token<br>
	                            - Auth List - A list of auth data corresponding to the auth method, e.g., ['nibws', '2wire'] for http_auth or ['webservice_att_labs.crt.pem', 'webservice_att_labs.key.pem'] for client_certs	                        
	                        <p>'''
	                    } else if (Utility == 'Capture Packets On AWS Servers') {
	                        return '''<p>
	                        <b>Capture packets on any specified AWS servers.</b>
	                        </p>
	                        <p style="color:blue">
	                        <b>Input device SerialNumber: </b>Device with the serialnumber has already bootstrapped to environment<br>
	                        <b>Input bastion server info: </b>AWS Bastion server information format: private key;bastion server ip;server user<br> 
	                        <b>Input AWS servers: </b>One or multiple server IPs separated by comma , 
	                        </p>'''
	                    } else if (Utility == 'Get Device Classifiers') {
	                        return '''<p>
	                        <b>Call REST API to get device classifiers and save to text file and excel file.</b><br>
	                        </p>
	                        <p style="color:blue">
	                        <b>Input serialnumber:</b> Device with the serialnumber has already bootstrapped to environment<br>
	                        <b>Input environment info: </b>REST API URL and Auth<br>
	                            - API URL - base API URL<br>
	                            - Auth Method - The values can be http_auth, client_certs, wsse_user_token<br>
	                            - Auth List - A list of auth data corresponding to the auth method, e.g., ['nibws', '2wire'] for http_auth or ['webservice_att_labs.crt.pem', 'webservice_att_labs.key.pem'] for client_certs	                        
	                        </p>'''
	                    } else if (Utility == 'Compare Device Classifiers From Two Environments') {
	                        return '''<p>
	                        <b>Get device classifiers from two environments and save each to text file and all to excel file.</b><br>
	                        </p>
	                        <p style="color:blue">
	                        <b>Input serialnumber for environment #1:</b> Device with the serialnumber has already bootstrapped to environment #1<br>
	                        <b>Input environment #1 info: </b>REST API URL and Auth<br>
	                            - API URL - base API URL<br>
	                            - Auth Method - The values can be http_auth, client_certs, wsse_user_token<br>
	                            - Auth List - A list of auth data corresponding to the auth method, e.g., ['nibws', '2wire'] for http_auth or ['webservice_att_labs.crt.pem', 'webservice_att_labs.key.pem'] for client_certs<br>
	                        <b>Input serialnumber for environment #2: </b>Device with the serialnumber has already bootstrapped to environment #2<br>
	                        <b>Input environment #2 info: </b>REST API URL and Auth<br>
	                            - API URL - base API URL<br>
	                            - Auth Method - The values can be http_auth, client_certs, wsse_user_token<br>
	                            - Auth List - A list of auth data corresponding to the auth method, e.g., ['nibws', '2wire'] for http_auth or ['webservice_att_labs.crt.pem', 'webservice_att_labs.key.pem'] for client_certs<br>
	                            </p>'''
	                    } else if (Utility == 'Generate Excel With Data From Files') {
	                        return '''<p>
	                        <b>Generate excel file with selected data from files.</b><br>
	                        </p>
							<p style="color:blue">
							<b>Input the path of the txt files: </b>The data from all the txt files under the path will be added to Excel worksheet<br>
							<b>Input the parameter to filter the files (leave it empty if no filter): </b>Add data from those txt files containing the parameter to Excel worksheet<br>
							<b>Input the Excel worksheet name: </b>The first worksheet name in Excel
							</p>'''
	                    } else {
	                        return 'No utility is selected.'
	                    }
                    """
                                       
                    properties([
                        parameters([
                            string(
                                defaultValue: 'TestData_Custom', 
                                name: 'TestDataDir',
                                description: 'Relative directory to the workspace. The directory contains test data files. Please make sure you have this directory under your workspace.',
                                trim: true
                            ),
                            string(
                                defaultValue: 'All_TestData', 
                                name: 'TestDataFileName',
                                description: 'Test data file name.',
                                trim: true
                            ),  
                            [
                                $class: 'ChoiceParameter', 
                                choiceType: 'PT_SINGLE_SELECT', 
                                description: '', 
                                filterLength: 1, 
                                filterable: true, 
                                name: 'Utility', 
                                script: [
                                    $class: 'GroovyScript', 
                                    fallbackScript: [
                                        classpath: [], 
                                        sandbox: false, 
                                        script: "return['no utility']"
                                    ], 
                                    script: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: 
                                                "${choiceUtility}"
                                    ]
                                ]
                            ],
                            [
                                $class: 'DynamicReferenceParameter', 
                                choiceType: 'ET_FORMATTED_HTML', 
                                description: '', 
                                name: 'Information', 
                                referencedParameters: 'Utility', 
                                script: 
                                    [$class: 'GroovyScript', 
                                    script: 'return["no information"]', 
                                    script: [
                                        script: "${information}"
                                    ]
                                ]
                            ]        
                        ])
                    ])
                }
            }
        }
        
       stage ("Check out scripts") {
            steps {
                checkout([
                	$class: 'GitSCM', 
                	branches: [[name: '*/master']], 
                	doGenerateSubmoduleConfigurations: false, 
                	extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: '../']], 
                	submoduleCfg: [], 
                	userRemoteConfigs: [[credentialsId: 'github_creds', url: 'https://github.com/commscope-qa-automation/RobotProject.git']]
                	])
            }
        }
        
        stage ("Run scripts") {
            steps {
                script {
	                currentBuild.displayName = "#" + currentBuild.number + " " + LOGIN_USER
	                
                    if (params.Utility == "") {
                        println("No utility is selected.")
                    } else {
                        bat '''
                        cd ../ECOManageRobotProject/TestSuite_Utility
                        for /F %%a in ('findstr /c:"%Utility%" *.robot') do set "output=%%a"
                        for /F "tokens=1 delims=:" %%a in ("%output%") do (
                            set "testsuite=%%a"
                        )
                        cd %WORKSPACE%
                        robot -t "%Utility%" --log Utility_log_1.html --output Utility_output_1.xml --report Utility_report_1.html --variablefile ../../%TestDataDir%/%TestDataFileName%.py ../ECOManageRobotProject/TestSuite_Utility/%testsuite%'''
                    }
                }
            }
        }
    }
}