def getLoginUser() {
    def loginUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')['userId'][0]
    return loginUser
}

def LOGIN_USER = getLoginUser()
def AGENT_LABLE = "robot_windows_" + LOGIN_USER

pipeline {
    options {skipDefaultCheckout(true)}

    agent { 
        label {
            label "${AGENT_LABLE}"
        }
    }
  
    stages {
        stage('Parameters'){
            steps {            
                script {
                    def choiceTestSuite
                    def choiceTestCase
                    
                    if (env.JOB_NAME.contains('ATT')) {
					
                        choiceEnv = '''
                            return [
                        	"ATT76",
                        	"ATT60",
                        	"QA1"
                        	]
                        '''

                        choiceApp = '''
                            if (Operation == "Check Status") {
                            	return [
									"DMC - ECO Manage for Devices + Nginx - DMC:selected",
									"SMS - ECO Manage for Services + Nginx - SMS",
									"TM - Traffic Manager + Nginx - TM",
									"TM REDIS - Traffic Manager Redis - TM REDIS",
									"TR157BRIDGE - TR157bridge - TR157BRIDGE",
									"COLLECT - ECO Collect + Nginx - COLLECT",
									"COLLECT REDIS - ECO Collect Redis - COLLECT",
									"COLLECT RMQ - ECO Collect RabbitMQ - COLLECT RMQ",
									"COLLECT CASSANDRA - ECO Collect Cassandra - COLLECT CASSANDRA",
									"ESP - ESP Writer - ESP",
									"ESP RMQ - ESP Writer RabbitMQ - ESP RMQ",
									"NOTIF - ECO Notification Service - NOTIF",
									"NOTIF ENDPOINT - ECO Notification Notification Endpoint - NOTIF ENDPOINT",
									"RGACT BROKER - RGActivation Broker - RGACT BROKER",
									"RGACT DISPATCHER - RGActivation Dispatcher - RGACT DISPATCHER",
									"RGACT ENDPOINT - RGActivation Endpoint - RGACT ENDPOINT",
									"MDC - MDC Proxy - MDC",
									"LAS - Log Archive Server - LAS",
									"BDC - Bulk Data Collect writing (bdc fwll ngfw) - DMC"									
                            	]
                            } else if (Operation == "Check Server Log For Today") {
                            	return [
									"DMC - ECO Manage for Devices - DMC:selected",
									"SMS - ECO Manage for Services - SMS",
									"TM - Traffic Manager - TM",
									"TR157BRIDGE - TR157bridge - TR157BRIDGE",
									"COLLECT - ECO Collect - COLLECT",
									"ESP - ESP Writer - ESP",
									"NOTIF - ECO Notification Service - NOTIF",
									"RGACT DISPATCHER - RGActivation Dispatcher - RGACT DISPATCHER",
									"LAS - Log Archive Server - LAS"
                            	]	
                            } else if (Operation == "Restart Application") {
                            	return [
									"DMC - ECO Manage for Devices + Nginx - DMC:selected",
									"SMS - ECO Manage for Services + Nginx - SMS",
									"TM - Traffic Manager + Nginx - TM",
									"TM REDIS - Traffic Manager Redis - TM REDIS",
									"TR157BRIDGE - TR157bridge - TR157BRIDGE",
									"COLLECT - ECO Collect + Nginx - COLLECT",
									"COLLECT REDIS - ECO Collect Redis - COLLECT",
									"COLLECT RMQ - ECO Collect RabbitMQ - COLLECT RMQ",
									"COLLECT CASSANDRA - ECO Collect Cassandra - COLLECT CASSANDRA",
									"ESP - ESP Writer - ESP",
									"ESP RMQ - ESP Writer RabbitMQ - ESP RMQ",
									"NOTIF - ECO Notification Service - NOTIF",
									"NOTIF ENDPOINT - ECO Notification Notification Endpoint - NOTIF ENDPOINT",
									"RGACT BROKER - RGActivation Broker - RGACT BROKER",
									"RGACT DISPATCHER - RGActivation Dispatcher - RGACT DISPATCHER",
									"RGACT ENDPOINT - RGActivation Endpoint - RGACT ENDPOINT",
									"MDC - MDC Proxy - MDC",
									"LAS - Log Archive Server - LAS"
                            	]	
                            } else {
                            	return ["unknown app"]
                            }
                        '''                        
                        
                    } else if (env.JOB_NAME.contains('Frontier')) {
                        choiceEnv = '''
                            return [
                        	""
                        	]
                        ''' 
                        choiceApp = '''
                            if (Environment == "test1") {
                            	return [
                            		""
                            	]
                            }
                            else if (Enviornment == "test2") {
                            	return [
                            		""
                            	]
                            } else {
                            	return ["Unknown env"]
                            }  
                        '''
                    }                   
                    
                    properties([
                        parameters([ 
                            string(
                                defaultValue: 'ecoqa.private', 
                                name: 'SSHKey',
                                description: 'SSH private key for accessing AWS environment.',
                                trim: true
                            ),						
                            [
                                $class: 'ChoiceParameter', 
                                choiceType: 'PT_SINGLE_SELECT', 
                                description: 'Select one testing environment', 
                                filterLength: 1, 
                                filterable: true, 
                                name: 'Environment', 
                                script: [
                                    $class: 'GroovyScript', 
                                    fallbackScript: [
                                        classpath: [], 
                                        sandbox: false, 
                                        script: 
                                            "return['no env']"
                                    ], 
                                    script: [
                                        classpath: [], 
                                        sandbox: false, 
                                        script: "${choiceEnv}"
                                    ]
                                ]
                            ],
                            [
                                $class: 'CascadeChoiceParameter', 
                                choiceType: 'PT_RADIO', 
                                description: '', 
                                name: 'Operation', 								
                                filterable: false, 
                                referencedParameters: 'Environment', 								
                                script: [
                                    $class: 'GroovyScript', 
                                    fallbackScript: [
                                        classpath: [], 
                                        sandbox: false, 
                                        script: 
                                            "return['no operation']"
                                    ], 
                                    script: [
                                        classpath: [], 
                                        sandbox: false, 
                                        script: "return ['Check Status:selected', 'Check Server Log For Today', 'Restart Application']"
                                    ]
                                ]
                            ],							
                            [
                                $class: 'CascadeChoiceParameter', 
                                choiceType: 'PT_MULTI_SELECT', 
                                description: 'Select one, multiple, or all applications. Format: Application Name - Description - Application Server',
                                name: 'Application', 
                                filterable: true,
                                referencedParameters: 'Operation', 
                                script: 
                                    [$class: 'GroovyScript', 
                                    fallbackScript: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: "return['no app']"
                                            ], 
                                    script: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: "${choiceApp}"
                                        ] 
                                ]
                            ]                                                                                  
                        ])
                    ])
                }
            }
        }
        
        stage ("Check out scripts") {
            steps {
                checkout([
                	$class: 'GitSCM', 
                	branches: [[name: '*/master']], 
                	doGenerateSubmoduleConfigurations: false, 
                	extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: '../']], 
                	submoduleCfg: [], 
                	userRemoteConfigs: [[credentialsId: 'github_creds', url: 'https://github.com/commscope-qa-automation/RobotProject.git']]
                	])
            }
        }
        
        stage ("Run scripts") {
            steps {
            	script {
	                currentBuild.displayName = "#" + currentBuild.number + " " + LOGIN_USER + " - " + params.Environment

        	        if (env.JOB_NAME.contains('ATT')) {
	                    env.CUSTOMER = "_ATT"
	                } else if (env.JOB_NAME.contains('Ziply')) {
	                    env.CUSTOMER = "_Ziply"
	                } else if (env.JOB_NAME.contains('Frontier')) {
	                    env.CUSTOMER = "_Frontier"
					} else if (env.JOB_NAME.contains('Sasktel')) {
	                    env.CUSTOMER = "_Sasktel"
	                } else if (env.JOB_NAME.contains('Telstra')) {
	                    env.CUSTOMER = "_Telstra"
	                } else if (env.JOB_NAME.contains('Rogers')) {
	                    env.CUSTOMER = "_Rogers"
	                } else {
	                    env.CUSTOMER = "_Test"
	                }

                    env.LOCAL_WORKSPACE = env.WORKSPACE.split("workspace")[0]
                    env.RESULT_DIR="workspace/" + env.JOB_NAME + "/" + params.OutputDir					
                                        
                    env.DOCKER_REGISTRY = "docker-registry.qa.ps.arris.com:5000"
                    env.DOCKER_IMAGE = "robot-docker"	
                    env.DOCKER_IMAGE_TAG = "1"	
                    env.DOCKER_IMAGE_FULL = env.DOCKER_REGISTRY + "/" + env.DOCKER_IMAGE + ":" + env.DOCKER_IMAGE_TAG
                    env.DOCKER_CONTAINER = "robot-docker-container"	+ "-" + LOGIN_USER																											                            	           											
                    
                    if (isUnix()) {
                        env.AGENT_OS = "linux"
                    } else {
                        env.AGENT_OS = "windows"
                    }

                    if (AGENT_OS == "windows") {
                        bat '''
                            SETLOCAL ENABLEDELAYEDEXPANSION

                            echo --------------------------------------------
                            echo Check if the docker container %DOCKER_CONTAINER% is running
                            echo --------------------------------------------
                            set "containter_status="
                            for /f %%i in ('docker inspect -f '{{.State.Status}}' %DOCKER_CONTAINER%') do set containter_status=%%i
                            if "!containter_status!" == "'running'" (
                                echo --------------------------------------------
                                echo The docker container %DOCKER_CONTAINER% is running
                                echo --------------------------------------------							
                                goto exeTCInDocker
                            ) else (
                                if "!containter_status!" == "'exited'" (
                                    echo --------------------------------------------
                                    echo The docker container %DOCKER_CONTAINER% is stopped
                                    echo Start the stopped docker container %DOCKER_CONTAINER%
                                    echo --------------------------------------------	
                                    docker start %DOCKER_CONTAINER%								
                                ) else (
                                    echo --------------------------------------------
                                    echo The docker container %DOCKER_CONTAINER% is not running
                                    echo Check if docker is installed
                                    echo --------------------------------------------
                                    set "docker_installed="
                                    for /f %%j in ('docker version ^| findstr Server') do set docker_installed=%%j
        
                                    if "!docker_installed!" == "" (
                                        echo --------------------------------------------
                                        echo Docker is not installed
                                        echo Start Robot Framework automation without docker container
                                        echo --------------------------------------------
                                        goto exeTC	
                                    ) else (
                                        echo --------------------------------------------
                                        echo Start running docker container %DOCKER_CONTAINER% from image %DOCKER_IMAGE_FULL%
                                        echo --------------------------------------------
                                        docker run --name %DOCKER_CONTAINER% -v %LOCAL_WORKSPACE%:/usr/src -d -t %DOCKER_IMAGE_FULL%	
                                        goto exeTCInDocker
                                    )
                                )
                            )

                            :exeTCInDocker
                            echo Start Robot Framework automation in docker container
                            docker exec %DOCKER_CONTAINER% robot -t "Check Status Or Restart App" -v "ENV:%Environment%" -v "OPER:%Operation%" -v "APPS:%Application%" -v "AWS_PRIVATE_KEY:%SSHKey%" workspace/ECOManageRobotProject/TestSuite_ECO_%CUSTOMER%/TestSuite_ECOManage/ECOEnv.robot

                            goto :eof

                            :exeTC
                            echo Start Robot Framework automation
                            robot -t "Check Status Or Restart App" -v "ENV:%Environment%" -v "OPER:%Operation%" -v "APPS:%Application%" -v "AWS_PRIVATE_KEY:%SSHKey%" ../ECOManageRobotProject/TestSuite_ECO_%CUSTOMER%/TestSuite_ECOManage/ECOEnv.robot
                            goto :eof

                            :eof
                        '''
                    }
                    else {
                        sh '''
                            exeTCInDocker () {
                                echo Start Robot Framework automation in docker container
                                docker exec ${DOCKER_CONTAINER} robot -t "Check Status Or Restart App" -v "ENV:${Environment}" -v "OPER:${Operation}" -v "APPS:${Application}" -v "AWS_PRIVATE_KEY:${SSHKey}" workspace/ECOManageRobotProject/TestSuite_ECO_${CUSTOMER}/TestSuite_ECOManage/ECOEnv.robot                   			
                            }

                            exeTC () {
                                echo Start Robot Framework automation
                                robot -t "Check Status Or Restart App" -v "ENV:${Environment}" -v "OPER:${Operation}" -v "APPS:${Application}" -v "AWS_PRIVATE_KEY:${SSHKey}" ../ECOManageRobotProject/TestSuite_ECO_${CUSTOMER}/TestSuite_ECOManage/ECOEnv.robot                    			

                            }

                            echo --------------------------------------------
                            echo Check if the docker container ${DOCKER_CONTAINER} is running
                            echo --------------------------------------------
                            set +e
                            container_status=$( docker container inspect -f '{{.State.Status}}' ${DOCKER_CONTAINER} )
                            set -e
                            if [ "${container_status}" = "running" ]
                            then
                                echo --------------------------------------------
                                echo The docker container ${DOCKER_CONTAINER} is running
                                echo Start Robot Framework automation in docker container	
                                echo --------------------------------------------
                                exeTCInDocker
                            elif [ "${container_status}" = "exited" ]
                            then
                                echo --------------------------------------------
                                echo The docker container ${DOCKER_CONTAINER} is stopped
                                echo Start the stopped docker container ${DOCKER_CONTAINER}
                                echo --------------------------------------------	
                                docker start ${DOCKER_CONTAINER}	
                                exeTCInDocker
                            else
                                echo --------------------------------------------
                                echo The docker container ${DOCKER_CONTAINER} is not running
                                echo Check if docker is installed
                                echo --------------------------------------------
                                if [ -z "$( docker version )" ]
                                then
                                    echo --------------------------------------------
                                    echo Docker is not installed
                                    echo Start Robot Framework automation without docker container
                                    echo --------------------------------------------
                                    exeTC	
                                else
                                    echo --------------------------------------------
                                    echo Start running docker container ${DOCKER_CONTAINER} from image ${DOCKER_IMAGE_FULL}
                                    echo --------------------------------------------
                                    docker run --name ${DOCKER_CONTAINER} -v ${LOCAL_WORKSPACE}:/usr/src -d -t ${DOCKER_IMAGE_FULL}	
                                    exeTCInDocker
                                fi
                            fi
                        '''
                    }                    
                }
            }
        }
    }
}   