@Library('shared-library') _

properties([
    parameters([  
        string(
            defaultValue: 'TestData_Custom', 
            name: 'TestDataDir',
            description: 'The directory <WORKSPACE>/<TestDataDir> contains test data files.',
            trim: true
        ),                
        text(
            defaultValue: '''TestData: All_TestData_att76_52141N005018
TestSuiteName: ECOManageGUI
TestCaseFilter: -t ECOIOT-391
JIRAVersion: ATT_FW_Upgrade_5268
JIRACycle: GUI Operations
JIRAFolder: 
###############################################
TestData: All_TestData_att76_52141N005018
TestSuiteName: CR1698IPDR
TestCaseFilter: -t ECOIOT-4399 -t ECOIOT-4404
JIRAVersion: ATT_FW_Upgrade_5268
JIRACycle: CR1698IPDR
JIRAFolder: 
###############################################
TestData: All_TestData_att76_52141N005018
TestSuiteName: ECOManageBDC
TestCaseFilter: 
JIRAVersion: ATT_FW_Upgrade_5268
JIRACycle: Bulk Data Collection
JIRAFolder: 
###############################################''', 
            name: 'InputData',
            description: ''
        )
    ])
])

def projectList = []

def LOGIN_USER = jenkinsUtil.getLoginUser()
                    
pipeline {
    options {skipDefaultCheckout(true)}

    agent {label "robot_${LOGIN_USER}"}
                   
    stages {
        stage ("Check out scripts") {
            steps {
                checkout([
                	$class: 'GitSCM', 
                	branches: [[name: '*/master']], 
                	doGenerateSubmoduleConfigurations: false, 
                	extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: '../']], 
                	submoduleCfg: [], 
                	userRemoteConfigs: [[credentialsId: 'github_creds', url: 'https://github.com/commscope-qa-automation/RobotProject.git']]
                	])
            }
        }
        
        stage ("Run scripts") {
            steps {
                script {
					/*
					########################################################################
					Build history: #<Build Number> <Login User>
					########################################################################
					*/                     
                    currentBuild.displayName = currentBuild.number + " " + LOGIN_USER                    

					/*
					########################################################################
					Defined different environment variables for robot framework command line
					########################################################################
					*/ 
					if (env.JOB_NAME.contains('ATT')) {
	                    env.CUSTOMER = "_ATT"
	                } else if (env.JOB_NAME.contains('Ziply')) {
	                    env.CUSTOMER = "_Ziply"
	                } else if (env.JOB_NAME.contains('Frontier')) {
	                    env.CUSTOMER = "_Frontier"	                
                    } else if (env.JOB_NAME.contains('Sasktel')) {
	                    env.CUSTOMER = "_Sasktel"
	                } else if (env.JOB_NAME.contains('Telstra')) {
	                    env.CUSTOMER = "_Telstra"
	                } else if (env.JOB_NAME.contains('Rogers')) {
	                    env.CUSTOMER = "_Rogers"
	                } else {
	                    env.CUSTOMER = "_Test"
	                }
					
					env.LOGIN_USER = LOGIN_USER
                    env.RF_OUTPUT_DIR = "TestResult"
					
					println("Extract the input data")
					def dataList = []
					def tmpList = []
					params.InputData.readLines().each {
						if (it.contains("#####")) {
						    // 0 - testDataFile 1 - testSuitename 2 - testCaseFilter 3 - Version 4 - Cycle 5 - Folder 
							dataList.add(tmpList[0])
							dataList.add(tmpList[1])
							dataList.add(tmpList[2])
							dataList.add(tmpList[4])
							dataList.add(tmpList[5]) 
							projectList.add(tmpList[3])
							projectList.add(tmpList[4])
							projectList.add(tmpList[5])
							projectList.add(tmpList[1]) 
							tmpList = []
						}
						else {
							if (it == "") {
								println("Empty line...")
							} else {
								data = it.split(':')
								
								if (data.size() == 2) {
									tmpList.add(data[1].trim())
									
								}
								else {
									tmpList.add("")
								}
							}
						}
					}

					robotframework.executeRFMultiple(this, dataList)
					
				}
			}
		}
	}
    
	post {
		always {
			script {
				/*
				########################################################################
				Start Robot Framework publish
				########################################################################
				*/                  
				step(                    
					[
					  $class                    : 'RobotPublisher',
					  outputPath                : '${RF_OUTPUT_DIR}',
					  outputFileName            : "Final_output.xml",
					  reportFileName            : "Final_report.html",
					  logFileName               : "*_log.html",
					  disableArchiveOutput      : false,
					  passThreshold             : 100,
					  unstableThreshold         : 95.0,
					  otherFiles                : "Screenshots/*.png,Output/*/*"
					]
				  )
			}

			script {
				/*
				########################################################################
				Start JIRA
				########################################################################
				*/
				
				jira.updateJiraTestCaseStatus(LOGIN_USER, env.WORKSPACE, env.RF_OUTPUT_DIR, projectList)
				
			}

			/*
			########################################################################
			Start Email notification
			########################################################################
			*/              
			emailext body: '''<html>
				  <head>
					<title>Robot Framework Automation Result</title>
				  </head>
				  <body>
					<h1>ECO Robot Framework Automation Result</h1>
					   <p>
							  $PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS
					   </p>
					   <p>
							  Check console output at $BUILD_URL to view the results.
					  </p>
					   <p>
						   <a href=${ROBOT_REPORTLINK}>Robot Framework Report</a>
					   </p>
					   <p>Failed Test Cases:</p>
					   <p>${ROBOT_FAILEDCASES}</p>
					</h1>
				  </body>
				</html>''', 
			mimeType: 'text/html',  
			recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], 
			replyTo: '$DEFAULT_REPLYTO', 
			subject: '$PROJECT_NAME - ${ROBOT_PASSRATIO} -- PASS ${ROBOT_PASSPERCENTAGE}%'            
		}        
	}
}   