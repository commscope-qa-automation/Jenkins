def sectionHeaderStyle = '''
    color: white;
    background: green;
    font-family: Roboto, sans-serif !important;
    padding: 5px;
    text-align: center;
'''

def separatorStyle = '''
    border: 0;
    border-bottom: 1px dashed #ccc;
    background: #999;
'''

def separatorTCStyle = '''
border-color: blue;
border-style: solid; 
border-width: 1px;
'''

/*
########################################################################
Functions
########################################################################
*/
def sendGetRequest(url, username, password) {
	println("url = " + url)
	def conn = new URL(url).openConnection()
	conn.setRequestProperty("Content-Type", "application/json")
	conn.setRequestProperty("Accept", "application/json")
	conn.setRequestProperty("Authorization", "Basic " + (username+":"+password).bytes.encodeBase64().toString())
	conn.requestMethod = 'GET'
	def code = conn.getResponseCode()
	def content = conn.getInputStream().getText()
	return [code, content]
}

def sendPutRequest(url, body, username, password) {
	println("url = " + url)
	println("body = " + body)
	def conn = new URL(url).openConnection()
	conn.setRequestProperty("Content-Type", "application/json")
	conn.setRequestProperty("Accept", "application/json")
	conn.setRequestProperty("Authorization", "Basic " + (username+":"+password).bytes.encodeBase64().toString())
	conn.requestMethod = 'PUT'

	conn.setDoOutput(true)
	OutputStream outStream = conn.getOutputStream()
	OutputStreamWriter outStreamWriter = new OutputStreamWriter(outStream, "UTF-8")
	outStreamWriter.write(body)
	outStreamWriter.flush()
	outStreamWriter.close()
	outStream.close()

	def code = conn.getResponseCode()
	def content = conn.getInputStream().getText()
	return [code, content]
}  

@NonCPS
def parseJson(content) {
    new groovy.json.JsonSlurperClassic().parseText(content)
}

def getLoginUser() {
    def loginUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')['userId'][0]
    return loginUser
}

def LOGIN_USER = getLoginUser()

pipeline {
    options {skipDefaultCheckout(true)}

    agent { label "robot_" + params.OS + "_" + LOGIN_USER}
    
    stages {
        stage('Parameters'){
            steps {            
                script {
                    def choiceTestSuite
                    def choiceTestCase
                    
                    if (env.JOB_NAME.contains('ATT')) {
                        choiceTestSuite = '''
                            return [
                        	"",
                        	"ECOManageGUI",
                        	"ECOManageBDC",
                        	"ECOCollect",
                        	"PairwiseAPI",
                        	"PolicyProvision",
                        	"CR1575Crashlog",
                        	"CR1527FWLL_CR1896NGFW",
                        	"CR1698IPDR",
                        	"CR1698HTTPBDC",
                        	"CR1737EventNotification",
                        	"CR1867Notification",
                        	"CR1882BidirectionalSpeedTest",	
                        	"RGFMECO69NBIUpgrade",	
                        	"RGFMECO134Docker",
                        	"FirmwareUpgrade",
                        	"RG5268AC"
                        	]
                        '''

                        choiceTestCase = '''
                            if (TestSuiteName == "ECOManageGUI") {
                            	return [
                            		"",
                            		"ECOIOT-391",
                            		"ECOIOT-392",
                            		"ECOIOT-393",
                            		"ECOIOT-394",
                            		"ECOIOT-395",
                            		"ECOIOT-396",
                            		"ECOIOT-397",
                            		"ECOIOT-398",
                            		"ECOIOT-399",
                            		"ECOIOT-400",
                            		"ECOIOT-401",
                            		"ECOIOT-402",
                            		"ECOIOT-403",
                            		"ECOIOT-404",
                            		"ECOIOT-405",
                            		"ECOIOT-406",
                            		"ECOIOT-407",
                            		"ECOIOT-408",
                            		"ECOIOT-409",
                            		"ECOIOT-410",
                            		"ECOIOT-411",
                            		"ECOIOT-412",
                            		"ECOIOT-413",
                            		"ECOIOT-414",
                            		"ECOIOT-415",
                            		"ECOIOT-416",
                            		"ECOIOT-417",
                            		"ECOIOT-418",
                            		"ECOIOT-419",
                            		"ECOIOT-420",
                            		"ECOIOT-421",
                            		"ECOIOT-422",
                            		"ECOIOT-423",
                            		"ECOIOT-431",
                            		"ECOIOT-432",
                            		"ECOIOT-433",
                            		"ECOIOT-441",
                            		"ECOIOT-442",
                            		"ECOIOT-443",
                            		"ECOIOT-444",
                            		"ECOIOT-445",
                            		"ECOIOT-446",
                            		"ECOIOT-447",
                            		"ECOIOT-448",
                            		"ECOIOT-453",
                            		"ECOIOT-454",
                            		"ECOIOT-455",
                            		"ECOIOT-3310",
                            		"ECOIOT-5450",
                            		"ECOIOT-6180"
                            	]
                            } else if (TestSuiteName == "ECOManageBDC") {
                            	return [
                            		"ECOIOT-3294"
                            	]
                            } else if (TestSuiteName == "ECOCollect") {
                            	return [
                            		"",
                            		"ECOIOT-3080",
                            		"ECOIOT-3082",
                            		"ECOIOT-3086",
                            		"ECOIOT-3087",
                            		"ECOIOT-3090",
                            		"ECOIOT-3091",
                            		"ECOIOT-3104",
                            		"ECOIOT-3112",
                            		"ECOIOT-3113",
                            		"ECOIOT-3114",
                            		"ECOIOT-3115",
                            		"ECOIOT-4100",
                            		"ECOIOT-4109",
                            		"ECOIOT-4167",
                            		"ECOIOT-5625",
                            		"ECOIOT-5626",
                            		"ECOIOT-5627"
                            	]
                            } else if (TestSuiteName == "FirmwareUpgrade") {
                            	return [
                            		"",
                            		"ECOIOT-2398",
                            		"ECOIOT-2400",
                            		"ECOIOT-2402",
                            		"ECOIOT-3311",
                            		"ECOIOT-5395"
                            	]
                            } else if (TestSuiteName == "PairwiseAPI") {
                            	return [
                            		"",
                            		"ECOIOT-1531",
                            		"ECOIOT-1914",
                            		"ECOIOT-1918",
                            		"ECOIOT-1919",
                            		"ECOIOT-1924",
                            		"ECOIOT-1928",
                            		"ECOIOT-1929",
                            		"ECOIOT-3152",
                            		"ECOIOT-3153",
                            		"ECOIOT-3169",
                            		"ECOIOT-3170",
                            		"ECOIOT-3313",
                            		"ECOIOT-3314",
                            		"ECOIOT-3315",
                            		"ECOIOT-3316",
                            		"ECOIOT-3317",
                            		"ECOIOT-3318",
                            		"ECOIOT-3319",
                            		"ECOIOT-3320",
                            		"ECOIOT-3321",
                            		"ECOIOT-3322",
                            		"ECOIOT-3323",
                            		"ECOIOT-3324",
                            		"ECOIOT-3325",
                            		"ECOIOT-390",
                            		"ECOIOT-458",
                            		"ECOIOT-459",
                            		"ECOIOT-460",
                            		"ECOIOT-461",
                            		"ECOIOT-462",
                            		"ECOIOT-6174"
                            	]
                            } else if (TestSuiteName == "PolicyProvision") {
                            	return [
                            		"",
                            		"ECOIOT-243",
                            		"ECOIOT-244",
                            		"ECOIOT-245",
                            		"ECOIOT-246",
                            		"ECOIOT-247",
                            		"ECOIOT-248",
                            		"ECOIOT-249",
                            		"ECOIOT-250",
                            		"ECOIOT-251",
                            		"ECOIOT-252",
                            		"ECOIOT-253",
                            		"ECOIOT-254",
                            		"ECOIOT-255",
                            		"ECOIOT-256",
                            		"ECOIOT-257",
                            		"ECOIOT-258",
                            		"ECOIOT-259",
                            		"ECOIOT-260",
                            		"ECOIOT-261",
                            		"ECOIOT-262",
                            		"ECOIOT-263",
                            		"ECOIOT-264",
                            		"ECOIOT-265",
                            		"ECOIOT-266",
                            		"ECOIOT-267",
                            		"ECOIOT-268",
                            		"ECOIOT-269",
                            		"ECOIOT-270",
                            		"ECOIOT-271",
                            		"ECOIOT-272",
                            		"ECOIOT-273",
                            		"ECOIOT-274",
                            		"ECOIOT-275",
                            		"ECOIOT-276",
                            		"ECOIOT-277",
                            		"ECOIOT-278",
                            		"ECOIOT-279",
                            		"ECOIOT-280",
                            		"ECOIOT-281",
                            		"ECOIOT-282",
                            		"ECOIOT-283",
                            		"ECOIOT-284",
                            		"ECOIOT-286",
                            		"ECOIOT-287",
                            		"ECOIOT-288",
                            		"ECOIOT-289",
                            		"ECOIOT-290",
                            		"ECOIOT-291",
                            		"ECOIOT-292",
                            		"ECOIOT-293",
                            		"ECOIOT-294",
                            		"ECOIOT-295",
                            		"ECOIOT-296",
                            		"ECOIOT-297",
                            		"ECOIOT-298",
                            		"ECOIOT-299",
                            		"ECOIOT-300",
                            		"ECOIOT-301",
                            		"ECOIOT-302",
                            		"ECOIOT-303",
                            		"ECOIOT-304",
                            		"ECOIOT-305",
                            		"ECOIOT-306",
                            		"ECOIOT-307",
                            		"ECOIOT-308",
                            		"ECOIOT-309",
                            		"ECOIOT-310",
                            		"ECOIOT-311",
                            		"ECOIOT-312",
                            		"ECOIOT-313",
                            		"ECOIOT-314",
                            		"ECOIOT-315",
                            		"ECOIOT-316",
                            		"ECOIOT-317",
                            		"ECOIOT-318",
                            		"ECOIOT-319",
                            		"ECOIOT-320",
                            		"ECOIOT-321",
                            		"ECOIOT-322",
                            		"ECOIOT-323",
                            		"ECOIOT-324",
                            		"ECOIOT-325",
                            		"ECOIOT-326",
                            		"ECOIOT-327",
                            		"ECOIOT-328",
                            		"ECOIOT-329",
                            		"ECOIOT-330",
                            		"ECOIOT-331",
                            		"ECOIOT-332",
                            		"ECOIOT-333",
                            		"ECOIOT-334",
                            		"ECOIOT-335",
                            		"ECOIOT-336",
                            		"ECOIOT-337",
                            		"ECOIOT-338",
                            		"ECOIOT-377",
                            		"ECOIOT-378",
                            		"ECOIOT-379",
                            		"ECOIOT-380",
                            		"ECOIOT-387",
                            		"ECOIOT-388",
                            		"ECOIOT-389",
                            		"ECOIOT-2619",
                            		"ECOIOT-2620",
                            		"ECOIOT-2621",
                            		"ECOIOT-2622",
                            		"ECOIOT-2623",
                            		"ECOIOT-2624",
                            		"ECOIOT-2625",
                            		"ECOIOT-2626",
                            		"ECOIOT-2627",
                            		"ECOIOT-2628",
                            		"ECOIOT-2629",
                            		"ECOIOT-2630",
                            		"ECOIOT-2631",
                            		"ECOIOT-2632",
                            		"ECOIOT-2633",
                            		"ECOIOT-2634",
                            		"ECOIOT-2635",
                            		"ECOIOT-2636",
                            		"ECOIOT-2639",
                            		"ECOIOT-2640",
                            		"ECOIOT-2641",
                            		"ECOIOT-2642",
                            		"ECOIOT-2643",
                            		"ECOIOT-2644",
                            		"ECOIOT-2645",
                            		"ECOIOT-2646",
                            		"ECOIOT-2647",
                            		"ECOIOT-2648",
                            		"ECOIOT-2649",
                            		"ECOIOT-2650",
                            		"ECOIOT-2651",
                            		"ECOIOT-2652",
                            		"ECOIOT-2653",
                            		"ECOIOT-2654",
                            		"ECOIOT-2655",
                            		"ECOIOT-2656",
                            		"ECOIOT-2657",
                            		"ECOIOT-2658",
                            		"ECOIOT-2659",
                            		"ECOIOT-2660",
                            		"ECOIOT-2661",
                            		"ECOIOT-2662",
                            		"ECOIOT-2663",
                            		"ECOIOT-2664",
                            		"ECOIOT-2665",
                            		"ECOIOT-2666",
                            		"ECOIOT-2667",
                            		"ECOIOT-2668",
                            		"ECOIOT-2669",
                            		"ECOIOT-2670",
                            		"ECOIOT-2671",
                            		"ECOIOT-2672",
                            		"ECOIOT-2673",
                            		"ECOIOT-2674",
                            		"ECOIOT-2675",
                            		"ECOIOT-2676",
                            		"ECOIOT-5602",
                            		"ECOIOT-5603",
                            		"ECOIOT-5604",
                            		"ECOIOT-5605",
                            		"ECOIOT-5606",
                            		"ECOIOT-5607",
                            		"ECOIOT-5608",
                            		"ECOIOT-5609",
                            		"ECOIOT-5610",
                            		"ECOIOT-5611",
                            		"ECOIOT-5612"
                            	]
                            } else if (TestSuiteName == "RGFMECO69NBIUpgrade") {
                            	return [
                            		"",
                            		"ECOIOT-5729",
                            		"ECOIOT-5730",
                            		"ECOIOT-5731",
                            		"ECOIOT-5732",
                            		"ECOIOT-5733",
                            		"ECOIOT-5734"
                            	]
                            } else if (TestSuiteName == "CR1698IPDR") {
                            	return [
                            		"",
                            		"ECOIOT-4396",
                            		"ECOIOT-4399",
                            		"ECOIOT-4404"
                            	]
                            } else if (TestSuiteName == "CR1698HTTPBDC") {
                            	return [
                            		"",
                            		"ECOIOT-4568",
                            		"ECOIOT-4723",
                            		"ECOIOT-6149"
                            	]
                            } else if (TestSuiteName == "CR1867Notification") {
                            	return [
                            		"",
                            		"ECOIOT-3941",
                            		"ECOIOT-3960",
                            		"ECOIOT-3965",
                            		"ECOIOT-3970"
                            	]
                            } else if (TestSuiteName == "CR1575Crashlog") {
                            	return [
                            		"",
                            		"ECOIOT-3356",
                            		"ECOIOT-3357",
                            		"ECOIOT-3361",
                            		"ECOIOT-3362",
                            		"ECOIOT-3369",
                            		"ECOIOT-3370"
                            	]
                            } else if (TestSuiteName == "RG5268AC") {
                            	return [
                            		"",
                            		"ECOIOT-5613",
                            		"ECOIOT-5614",
                            		"ECOIOT-5615",
                            		"ECOIOT-6074",
                            		"ECOIOT-6075",
                            		"ECOIOT-6088",
                            		"ECOIOT-6092",
                            		"ECOIOT-6093",
                            		"ECOIOT-6094",
                            		"ECOIOT-6095",
                            		"ECOIOT-6148",
                            		"ECOIOT-6150",
                            		"ECOIOT-6157",
                            		"ECOIOT-6158",
                            		"ECOIOT-6159",
                            		"ECOIOT-6160",
                            		"ECOIOT-6161",
                            		"ECOIOT-6162",
                            		"ECOIOT-6163",
                            		"ECOIOT-6164",
                            		"ECOIOT-6165",
                            		"ECOIOT-6166",
                            		"ECOIOT-6167",
                            		"ECOIOT-6168"
                            	]
                            } else if (TestSuiteName == "CR1737EventNotification") {
                            	return [
                            		"",
                            		"ECOIOT-3937",
                            		"ECOIOT-3980",
                            		"ECOIOT-3983"		
                            	]	
                            } else if (TestSuiteName == "CR1527FWLL_CR1896NGFW") {
                            	return [
                            		"",
                            		"ECOIOT-4936",
                            		"ECOIOT-4937",
                            		"ECOIOT-4939",
                            		"ECOIOT-4941",
                            		"ECOIOT-4942",
                            		"ECOIOT-4925",
                            		"ECOIOT-4926",
                            		"ECOIOT-4929",
                            		"ECOIOT-4931",
                            		"ECOIOT-4933"								
                            	]	
                            } else if (TestSuiteName == "CR1882BidirectionalSpeedTest") {
                            	return [
                            		"",
                            		"ECOIOT-4736",
                            		"ECOIOT-4737",
                            		"ECOIOT-4738",
                            		"ECOIOT-4739",
                            		"ECOIOT-4740"							
                            	]	
                            } else {
                            	return ["Unknown testsuite"]
                            }
                        '''                        
                        
                    } else if (env.JOB_NAME.contains('Ziply')) {
                        choiceTestSuite = '''
                            return [
                        	"",
                        	"ECOAssistGUI"
                        	]
                        ''' 
                        choiceTestCase = '''
                            if (TestSuiteName == "ECOAssistGUI") {
                            	return [
                            		"",
                            		"ECOIOT-90",
                            		"ECOIOT-3994",
                            		"ECOIOT-3995",
                            		"ECOIOT-3996",
                            		"ECOIOT-4013",
                            		"ECOIOT-4014",
                            		"ECOIOT-4015",
                            		"ECOIOT-4016",
                            		"ECOIOT-4017",
                            		"ECOIOT-4018",
                            		"ECOIOT-4019",
                            		"ECOIOT-4020",
                            		"ECOIOT-4021",
                            		"ECOIOT-4022",
                            		"ECOIOT-4023",
                            		"ECOIOT-4024", 
                            		"ECOIOT-4025", 
                            		"ECOIOT-4026",
                            		"ECOIOT-4027",
                            		"ECOIOT-4028",
                            		"ECOIOT-4030",
                            		"ECOIOT-4031",
                            		"ECOIOT-4035",
                            		"ECOIOT-4037",
                            		"ECOIOT-4040",
                            		"ECOIOT-4126",
                            		"ECOIOT-4127",
                            		"ECOIOT-4506",
                            		"ECOIOT-4509", 
                            		"ECOIOT-4510", 
                            		"ECOIOT-4513",
                            		"ECOIOT-4516",
                            		"ECOIOT-4517",
                            		"ECOIOT-4850",
                            		"ECOIOT-4852",
                            		"ECOIOT-4924",
                            		"ECOIOT-5291",
                            		"ECOIOT-5292",
                            		"ECOIOT-5389",
                            		"ECOIOT-5416",
                            		"ECOIOT-5417",
                            		"ECOIOT-5418",
                            		"ECOIOT-5870",
                            		"ECOIOT-6021",
                            		"ECOIOT-6035",
                            		"ECOIOT-6116",
                            		"ECOIOT-6208",
                            		"ECOIOT-6224",
                            		"ECOIOT-6228"
                            	]
                            }
                            else if (TestSuiteName == "test2") {
                            	return [
                            		"",
                            		"ECOIOT-392"
                            	]
                            } else {
                            	return ["Unknown testsuite"]
                            }  
                        '''
                    } else if (env.JOB_NAME.contains('Sasktel')) {
                        choiceTestSuite = '''
                            return [
                        	"",
                        	"ECOAssistGUI"
                        	]
                        ''' 
                        choiceTestCase = '''
                            if (TestSuiteName == "ECOAssistGUI") {
                            	return [
                            		"",
                            		"ECOIOT-4644",
									"ECOIOT-4646",
									"ECOIOT-4647",
									"ECOIOT-4650",
									"ECOIOT-4651",
									"ECOIOT-4652",
									"ECOIOT-4653",
									"ECOIOT-4658",
									"ECOIOT-4658b",
									"ECOIOT-4659",
									"ECOIOT-4662",
									"ECOIOT-4663",
									"ECOIOT-4665",
									"ECOIOT-4955",
									"ECOIOT-4957",
									"ECOIOT-4958",
									"ECOIOT-4959",
									"ECOIOT-4960",
									"ECOIOT-4961",
									"ECOIOT-4962",
									"ECOIOT-4964",
									"ECOIOT-5144",
									"ECOIOT-5144b",
									"ECOIOT-5146",
									"ECOIOT-5149",
									"ECOIOT-5149b",
									"ECOIOT-5301",
									"ECOIOT-5302",
									"ECOIOT-5303",
									"ECOIOT-5304",
									"ECOIOT-5308",
									"ECOIOT-5309",
									"ECOIOT-5310",
									"ECOIOT-5311",
									"ECOIOT-5312",
									"ECOIOT-5313",
									"ECOIOT-5314",
									"ECOIOT-5315",
									"ECOIOT-5316",
									"ECOIOT-5317",
									"ECOIOT-5318",
									"ECOIOT-5318b",
									"ECOIOT-5319",
									"ECOIOT-5319b",
									"ECOIOT-5326",
									"ECOIOT-5327",
									"ECOIOT-5328",
									"ECOIOT-5329",
									"ECOIOT-5330",
									"ECOIOT-5337",
									"ECOIOT-5340"
                            	]
                            }
                            else if (TestSuiteName == "test2") {
                            	return [
                            		"",
                            		"ECOIOT-392"
                            	]
                            } else {
                            	return ["Unknown testsuite"]
                            }  
                        '''
                    }


                    def functionGetRequest = '''
                        /*
                        ########################################################################
                        Functions
                        ########################################################################
                        */
                        def sendGetRequest(url, username, password) {
                        	def conn = new URL(url).openConnection()
                        	conn.setRequestProperty("Content-Type", "application/json")
                        	conn.setRequestProperty("Accept", "application/json")
                        	conn.setRequestProperty("Authorization", "Basic " + (username+":"+password).bytes.encodeBase64().toString())
                        	conn.requestMethod = 'GET'
                        	def code = conn.getResponseCode()
                        	def content = conn.getInputStream().getText()
                        	return [code, content]
                        }
                    '''
                    
                    def functionPutRequest = '''
                        def sendPutRequest(url, body, username, password) {
                    	println("url = " + url)
                    	println("body = " + body)
                    	def conn = new URL(url).openConnection()
                    	conn.setRequestProperty("Content-Type", "application/json")
                    	conn.setRequestProperty("Accept", "application/json")
                    	conn.setRequestProperty("Authorization", "Basic " + (username+":"+password).bytes.encodeBase64().toString())
                    	conn.requestMethod = 'PUT'
                    
                    	conn.setDoOutput(true)
                    	OutputStream outStream = conn.getOutputStream()
                    	OutputStreamWriter outStreamWriter = new OutputStreamWriter(outStream, "UTF-8")
                    	outStreamWriter.write(body)
                    	outStreamWriter.flush()
                    	outStreamWriter.close()
                    	outStream.close()
                    
                    	def code = conn.getResponseCode()
                    	def content = conn.getInputStream().getText()
                    	return [code, content]
                    }
                    '''
                    
                    def choiceProjectVersion = '''
                            import jenkins.model.Jenkins
                            import hudson.model.User
                            import groovy.json.JsonOutput
                            import groovy.json.JsonSlurper
                            
                            def user = User.current().getId()
                            def filename = "/tmp/project_version_" + user + ".json"

                            if (RetrieveProjectVersion == "Retrieve Project Version") {
                                // Get Etrack username and password from global credentials
                                def username = ""
                                def password = ""
                                def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
                                	com.cloudbees.plugins.credentials.common.StandardUsernameCredentials.class,
                                	Jenkins.instance,
                                	null,
                                	null
                                )
                                for (c in creds) {
                                	if (c.id == "etrack_creds_" + user) {
                                		username = c.username
                                		password = c.password
                                	}
                                }   
                            	
                            	def jiraBaseURL = "https://etrack.arrisi.com"
                            	def project = "ECOIOT"
                            
                            	def projectId = ""
                            	def versionId = ""
                            	def versionNameId= [:]
                            	def versionList = []
                                
                            	def jsonSlurper = new JsonSlurper()
                            	def url = jiraBaseURL+"/rest/api/latest/project/"+project+"/versions"
                            	(code, content) = sendGetRequest(url, username, password)
                                jsonResponse = jsonSlurper.parseText(content)
                        	    jsonResponse.each {
                            		if (it.released == false) {
                            			versionList.add(it.name)
                            			projectId = it.projectId
                            			versionId = it.id
                            			versionNameId.put(it.name, versionId)
                            		}
                        	    }
                        	
                            	def data = [
                            		projectId: projectId,
                            		versionNameId: versionNameId
                            	]
                            	def json_str = JsonOutput.toJson(data)
                            	def json_beauty = JsonOutput.prettyPrint(json_str)                            	
                                	
                            	File file = new File(filename)
                            	file.write(json_beauty)
                            	
                            	return versionList
                            }                    
                    '''
                    
                    def choiceProjectCycle = '''
                            import jenkins.model.Jenkins
                            import hudson.model.User
                            import groovy.json.JsonOutput
                            import groovy.json.JsonSlurper
                            
                            def user = User.current().getId()
                            def filename = "/tmp/project_version_" + user + ".json"

                            def jsonSlurper = new JsonSlurper()
                            def data = jsonSlurper.parse(new File(filename))
                            
                            def jiraBaseURL = "https://etrack.arrisi.com"
                            def projectId =  data["projectId"]
                            def versionId = data["versionNameId"][ProjectVersion]
                            def cycleNameId = [:]
                            def cycleNameList = []
                            
                            // Get Etrack username and password from global credentials
                            def username = ""
                            def password = ""
                            def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
                            	com.cloudbees.plugins.credentials.common.StandardUsernameCredentials.class,
                            	Jenkins.instance,
                            	null,
                            	null
                            )
                            for (c in creds) {
                            	if (c.id == "etrack_creds_" + user) {
                            		username = c.username
                            		password = c.password
                            	}
                            }
                            
                            def url = jiraBaseURL+"/rest/zapi/latest/cycle?projectId="+projectId+"&versionId="+versionId
                            (code, content) = sendGetRequest(url, username, password)
                            //assert code == 200
                            
                            jsonResponse = jsonSlurper.parseText(content)
                            jsonResponse.each {
                            	if (it.key != "recordsCount") {
                            		cycleNameList.add(it.value.name)
                            		cycleNameId.put(it.value.name, it.key)
                            	}
                            }
                            
                            def data1 = [
                            		projectId: projectId,
                            		versionId: versionId,
                            		cycleNameId: cycleNameId
                            	]
                            def json_str = JsonOutput.toJson(data1)
                            def json_beauty = JsonOutput.prettyPrint(json_str)
                            filename = "/tmp/project_cycle_" + user + ".json"
                            File file = new File(filename)
                            file.write(json_beauty)
                            
                            return cycleNameList                   
                    '''
                    
                    def choiceProjectFolder = '''
                            import jenkins.model.Jenkins
                            import hudson.model.User
                            import groovy.json.JsonOutput
                            import groovy.json.JsonSlurper
                            
                            def user = User.current().getId()
                            def filename = "/tmp/project_cycle_" + user + ".json"

                            def jsonSlurper = new JsonSlurper()
                            def data = jsonSlurper.parse(new File(filename))
                            
                            def jiraBaseURL = "https://etrack.arrisi.com"
                            def projectId =  data["projectId"]
                            def versionId = data["versionId"]
                            def cycleId = data["cycleNameId"][ProjectCycle]
                            def folderNameList = [""]
                            
                            // Get Etrack username and password from global credentials
                            def username = ""
                            def password = ""
                            def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
                            	com.cloudbees.plugins.credentials.common.StandardUsernameCredentials.class,
                            	Jenkins.instance,
                            	null,
                            	null
                            )
                            for (c in creds) {
                            	if (c.id == "etrack_creds_" + user) {
                            		username = c.username
                            		password = c.password
                            	}
                            }
                            
                            def url = jiraBaseURL+"/rest/zapi/latest/cycle/"+cycleId+"/folders?projectId="+projectId+"&versionId="+versionId
                            (code, content) = sendGetRequest(url, username, password)
                            //assert code == 200
                            
                            jsonResponse = jsonSlurper.parseText(content)
                            jsonResponse.each {
                            	folderNameList.add(it.folderName)
                            }
                            
                            return folderNameList                   
                    '''                    
                    
                    properties([
                        parameters([
                            choice(
                                choices: ['windows', 'linux'], 
                                name: 'OS'
                            ),
                            [
                                $class: 'ParameterSeparatorDefinition',
                                name: 'DIR_HEADER',
                                sectionHeader: 'Input OutputDir, TestDataDir, TestDataFileName',
                                separatorStyle: separatorStyle,
                                sectionHeaderStyle: sectionHeaderStyle
                            ],
                            string(
                                defaultValue: 'Jenkins_Robot_Results', 
                                name: 'OutputDir',
                                description: 'Relative directory to the workspace. The directory contains the Robot Framework output files: log.html, report.html, output.xml, xunit.xml.',
                                trim: true
                            ),
                            string(
                                defaultValue: 'TestData_Custom', 
                                name: 'TestDataDir',
                                description: 'Relative directory to the workspace. The directory contains test data files.',
                                trim: true
                            ),
                            string(
                                defaultValue: 'All_TestData', 
                                name: 'TestDataFileName',
                                description: 'Test data file name.',
                                trim: true
                            ), 
                            [
                                $class: 'ParameterSeparatorDefinition',
                                name: 'TESTSUITE_HEADER',
                                sectionHeader: 'TestSuites/TestCases: Select test suite and test cases.\nPlease use TestCaseRunFilter1 or TestCaseRunFilter2 to select test cases to run.',
                                separatorStyle: separatorStyle,
                                sectionHeaderStyle: sectionHeaderStyle
                            ],
                            [
                                $class: 'ChoiceParameter', 
                                choiceType: 'PT_SINGLE_SELECT', 
                                description: '', 
                                filterLength: 1, 
                                filterable: true, 
                                name: 'TestSuiteName', 
                                script: [
                                    $class: 'GroovyScript', 
                                    fallbackScript: [
                                        classpath: [], 
                                        sandbox: false, 
                                        script: 
                                            "return['no test suite']"
                                    ], 
                                    script: [
                                        classpath: [], 
                                        sandbox: false, 
                                        script: "${choiceTestSuite}"
                                    ]
                                ]
                            ],
                            [
                                $class: 'CascadeChoiceParameter', 
                                choiceType: 'PT_MULTI_SELECT', 
                                description: '',
                                name: 'TestCaseRunFilter1', 
                                filterable: true,
                                referencedParameters: 'TestSuiteName', 
                                script: 
                                    [$class: 'GroovyScript', 
                                    fallbackScript: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: "return['no test cases']"
                                            ], 
                                    script: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: "${choiceTestCase}"
                                        ] 
                                ]
                            ],
                            [
                                $class: 'ParameterSeparatorDefinition',
                                name: 'TCSeparator',
                                sectionHeader: '',
                                separatorStyle: separatorTCStyle,
                                sectionHeaderStyle: ''
                            ],                            
                            string(
                                defaultValue: '', 
                                name: 'TestCaseRunFilter2',
                                description: 'This is to filter which test cases will be run. The entire test suite will be run if the value is empty.\n-t, --test <name> 	Selects the test cases by name _.\n-i, --include <tag> 	Includes the test cases_ by tag.\n-e, --exclude <tag> 	Excludes the test cases_ by tag.',
                                trim: true
                            ),                            
                            [
                                $class: 'ParameterSeparatorDefinition',
                                name: 'ETRACK_HEADER',
                                sectionHeader: 'Etrack Release / Cycle: Auto update Etrack test case status.\nChoose "Retrieve Etrack Version and select Etrack Version / Cycle / Folder from dropdown list.',
                                separatorStyle: separatorStyle,
                                sectionHeaderStyle: sectionHeaderStyle
                            ],
                            [
                                $class: 'ChoiceParameter', 
                                choiceType: 'PT_CHECKBOX', 
                                description: '', 
                                filterLength: 1, 
                                filterable: false, 
                                name: 'RetrieveProjectVersion', 
                                script: [
                                    $class: 'GroovyScript', 
                                    fallbackScript: [
                                        classpath: [], 
                                        sandbox: false, 
                                        script: 
                                            "return['no text box']"
                                    ], 
                                    script: [
                                        classpath: [], 
                                        sandbox: false, 
                                        script: "return ['Retrieve Project Version']"
                                    ]
                                ]
                            ],
                            [
                                $class: 'CascadeChoiceParameter', 
                                choiceType: 'PT_SINGLE_SELECT', 
                                description: '',
                                name: 'ProjectVersion', 
                                filterable: true,                                 
                                referencedParameters: 'RetrieveProjectVersion', 
                                script: 
                                    [$class: 'GroovyScript', 
                                    fallbackScript: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: "return['no project version']"
                                    ], 
                                    script: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: "${choiceProjectVersion}${functionGetRequest}"
                                    ] 
                                ]
                            ],
                            [
                                $class: 'CascadeChoiceParameter', 
                                choiceType: 'PT_SINGLE_SELECT', 
                                description: '',
                                name: 'ProjectCycle', 
                                referencedParameters: 'ProjectVersion', 
                                script: 
                                    [$class: 'GroovyScript', 
                                    fallbackScript: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: "return['no project cycle']"
                                    ], 
                                    script: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: "${choiceProjectCycle}${functionGetRequest}"
                                    ] 
                                ]
                            ],
                            [
                                $class: 'CascadeChoiceParameter', 
                                choiceType: 'PT_SINGLE_SELECT', 
                                description: '',
                                name: 'ProjectFolder', 
                                referencedParameters: 'ProjectCycle', 
                                script: 
                                    [$class: 'GroovyScript', 
                                    fallbackScript: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: "return['no project folder']"
                                    ], 
                                    script: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: "${choiceProjectFolder}${functionGetRequest}"
                                    ] 
                                ]
                            ]                            
                        ])
                    ])
                }
            }
        }
        
        stage ("Check out scripts") {      
            steps {
                checkout([
                	$class: 'GitSCM', 
                	branches: [[name: '*/master']], 
                	doGenerateSubmoduleConfigurations: false, 
                	extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: '../']], 
                	submoduleCfg: [], 
                	userRemoteConfigs: [[credentialsId: 'github_creds', url: 'https://github.com/commscope-qa-automation/RobotProject.git']]
                	])
            }
        }
        
        stage ("Run scripts") {
            steps {
            	script {
	                currentBuild.displayName = "#" + currentBuild.number + " " + LOGIN_USER + " - " + params.TestSuiteName

	                if (env.JOB_NAME.contains('ATT')) {
	                    env.CUSTOMER = "Manage"
	                } else if (env.JOB_NAME.contains('Ziply')) {
	                    env.CUSTOMER = "_Ziply"
	                } else if (env.JOB_NAME.contains('Sasktel')) {
	                    env.CUSTOMER = "_Sasktel"
	                } else {
	                    env.CUSTOMER = "_Test"
	                }
            	            	
                    if (TestSuiteName != "") {
                    	if (params.OS == "windows") {
	                        bat '''IF EXIST %OutputDir% DEL /q %OutputDir%\\%TestSuiteName%_*.xml
	                        IF EXIST %OutputDir% DEL /q %OutputDir%\\%TestSuiteName%_*.html
	                        IF EXIST %OutputDir%\\Screenshots DEL /q %OutputDir%\\Screenshots\\*%TestSuiteName%*.png
	                        IF EXIST %OutputDir%\\Output FOR /d /r . %%d IN ("%OutputDir%\\Output\\*%TestSuiteName%*") DO @IF EXIST "%%d" rd /s /q "%%d"
	                        
	                        IF "%TestCaseRunFilter1%" == "" (SET "TestCaseRunFilter=%TestCaseRunFilter2%") ELSE (SET "TestCaseRunFilter=-t %TestCaseRunFilter1:,= -t %")
	                        
	                        ECHO Start Robot Framework automation
	                        robot %TestCaseRunFilter% --outputdir %OutputDir% --log %TestSuiteName%_log.html --output %TestSuiteName%_output.xml --report %TestSuiteName%_report.html --xunit %TestSuiteName%_junit.xml --variablefile ../../%TestDataDir%/%TestDataFileName%.py ../ECOManageRobotProject/TestSuite_ECO%CUSTOMER%/TestSuite_%TestSuiteName%.robot'''
                    	}
                    	else {
                    		sh '''
                    		echo test: ${TestCaseRunFilter1}
                    		if [ ${TestCaseRunFilter1} == "" ] 
                    		then 
                    			TestCaseRunFilter=${TestCaseRunFilter2} 
                    		else 
                    			TestCaseRunFilter=$(echo -t ${TestCaseRunFilter//,/ -t })
                    		fi
                    		
                    		echo Start Robot Framework automation
                    		robot ${TestCaseRunFilter} --outputdir ${OutputDir} --log ${TestSuiteName}_log.html --output ${TestSuiteName}_output.xml --report ${TestSuiteName}_report.html --xunit ${TestSuiteName}_junit.xml --variablefile ../../${TestDataDir}/${TestDataFileName}.py ../ECOManageRobotProject/TestSuite_ECO${CUSTOMER}/TestSuite_${TestSuiteName}.robot'''
                    	}
                    }
            	}
            }
        }
	}       
       
        
	post {
		always {        
			script {
			   if (TestSuiteName != "") { 
					/*
					########################################################################
					Start Robot Framework publish
					########################################################################
					*/                
					step(
						[
						  $class                    : 'RobotPublisher',
						  outputPath                : '${OutputDir}',
						  outputFileName            : "${TestSuiteName}_output.xml",
						  reportFileName            : "${TestSuiteName}_report.html",
						  logFileName               : "${TestSuiteName}_log.html",
						  disableArchiveOutput      : false,
						  passThreshold             : 100,
						  unstableThreshold         : 95,
						  otherFiles                : "Screenshots/*${TestSuiteName}*.png,Output/*${TestSuiteName}*/*"
						]
					  )
	
					
					/*
					########################################################################
					Start Etrack
					########################################################################
					*/
					/*
					##################################################
					Get values from build parameters
					##################################################
					*/
					def version = params.ProjectVersion
					def cycle = params.ProjectCycle
					def folder = params.ProjectFolder
					
					def robotResultPath = params.OutputDir
					def testsuiteName= params.TestSuiteName
					
					def workspace = env.WORKSPACE
					def junitFile = workspace + "/" + robotResultPath + "/" + testsuiteName + "_junit.xml"
					//println("junit xml file: " + junitFile)
					/*
					##################################################
					Start processing
					##################################################
					*/
					println("-----------------------------------------------------------------------------")
					if (version == "" || cycle == "") {
						println("Version or Cycle is not provided. No test case status update!!!")
						println("-----------------------------------------------------------------------------")
					} else {
					
						// Get Etrack username and password from global credentials
						println("Get Etrack credentials.")
						//println("LOGIN_USER:" + LOGIN_USER)
						
						def username = ""
						def password = ""
						def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
							com.cloudbees.plugins.credentials.common.StandardUsernameCredentials.class,
							jenkins.model.Jenkins.instance,
							null,
							null
						)
						for (c in creds) {
							if (c.id == "etrack_creds_" + LOGIN_USER) {
								username = c.username
								password = c.password
							}
						}
						//println("username:" + username)
						//println("password:" + password)
						
						// Update JIRA test case status
						println("Start updating Etrack test case status.")
						def jiraBaseURL = "https://etrack.arrisi.com"
						def project = "ECOIOT"
						
						// Read the junit file generated from Robot Framework
						def issue = ""
						def code = 0
						def content = ""
						def status = ""
						def projectId = ""
						def versionId = ""
						def cycleId = ""
						def folderId = ""
						def executionId = ""
						
						// Get Project Version ID
						(code, content) = sendGetRequest(jiraBaseURL+"/rest/api/latest/project/"+project+"/versions", username, password)
						assert code == 200
						jsonResponse = parseJson(content)
						projectId = jsonResponse.find {it.name == version}.projectId
						versionId = jsonResponse.find {it.name == version}.id
						
						//println("projectId = " + projectId)
						//println("versionId = " + versionId)
						
						(code, content) = sendGetRequest(jiraBaseURL+"/rest/zapi/latest/cycle?projectId="+projectId+"&versionId="+versionId, username, password)
						assert code == 200
						jsonResponse = parseJson(content)
						cycleId = jsonResponse.findAll {it.key != "recordsCount"}.find{it.value.name == cycle}.key
						
						//println("cycleId = " + cycleId)
							
						// Get Folder ID
						
						(code, content) = sendGetRequest(jiraBaseURL+"/rest/zapi/latest/cycle/"+cycleId+"/folders?projectId="+projectId+"&versionId="+versionId, username, password)
						assert code == 200
						jsonResponse = parseJson(content)
						folderId = jsonResponse.find {it.folderName == folder}?.folderId
						if (folderId == null) {
							folderId = ""
						}
						
						//println("folderId = " + folderId)
						
						//Get execution id
						println("--------------------------------------------------")
						(code, content) = sendGetRequest(jiraBaseURL+"/rest/zapi/latest/execution?cycleId="+cycleId+"&folderId="+folderId, username, password)
						assert code == 200
						executions = parseJson(content).executions
						if (executions.size() > 0) {
							def xml = readFile junitFile
							def testcases = new groovy.util.XmlParser().parseText(xml).value()
							//def testcases = new groovy.util.XmlParser().parseText(xml).testcase
							testcases.each {
								issue = it.attributes()['name']
								failure = it.value()
								//issue = it.@name
								//failure = it.failure
								executionId = executions.find {it.issueKey == issue}?.id
								if (executionId != null) {
									println("------------------------\nTest Case: " + issue + "\n------------------------")
									status = "1"
									if (!failure.isEmpty()) {
										status = "2"
									}
									body = '{"status": "' + status + '"}'
									(code, content) = sendPutRequest(jiraBaseURL+"/rest/zapi/latest/execution/"+executionId+"/execute", body, username, password)
									assert code == 200
								}
							}
							println("-----------------------------------------------------------------------------") 
						} else {
							println("No executions...")
						} 
					}   
							
					/*
					########################################################################
					Start Email notification
					########################################################################
					*/                
					emailext body: '''<html>
						  <head>
							<title>Robot Framework Automation Result</title>
						  </head>
						  <body>
							<h1>ECO Robot Framework Automation Result</h1>
							   <p>
									  $PROJECT_NAME - ${TestSuiteName} - Build # $BUILD_NUMBER - $BUILD_STATUS
							   </p>
							   <p>
									  Check console output at $BUILD_URL to view the results.
							  </p>
							   <p>
								   <a href=${ROBOT_REPORTLINK}>Robot Framework Report</a>
							   </p>
							   <p>Failed Test Cases:</p>
							   <p>${ROBOT_FAILEDCASES}</p>
							</h1>
						  </body>
						</html>''', 
					mimeType: 'text/html',  
					recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], 
					replyTo: '$DEFAULT_REPLYTO', 
					subject: '$PROJECT_NAME - ${TestSuiteName} - ${ROBOT_PASSRATIO} -- PASS ${ROBOT_PASSPERCENTAGE}%'
			   }
			   else {
				   println("No test suite")
			   }
			}
		}
	}                   
}   